--- sip/QtCore/qdatetime.sip.old	2012-10-13 21:16:19.000000000 +0200
+++ sip/QtCore/qdatetime.sip	2012-10-13 21:16:20.000000000 +0200
@@ -104,6 +104,7 @@
         }
 %End
 
+%If (PyQt_DateString)
     long __hash__() const;
 %MethodCode
         if (sipIsAPIEnabled("QDate", 2, 0))
@@ -116,6 +117,7 @@
             sipRes = _Py_HashPointer(sipSelf);
         }
 %End
+%End
 
 %If (Py_DateTime)
     SIP_PYOBJECT toPyDate() const /DocType="datetime.date"/;
@@ -143,6 +145,7 @@
     int daysInMonth() const;
     int daysInYear() const;
     int weekNumber(int *yearNumber = 0) const;
+%If (PyQt_TextDate)
 %If (Qt_5_0_0 -)
     static QString shortMonthName(int month, QDate::MonthNameType type = QDate::DateFormat);
 %End
@@ -179,8 +182,11 @@
 %If (Qt_4_5_0 - Qt_5_0_0)
     static QString longDayName(int weekday, QDate::MonthNameType type);
 %End
+%End
+%If (PyQt_DateString)
     QString toString(Qt::DateFormat format = Qt::TextDate) const;
     QString toString(const QString &format) const;
+%End
     bool setYMD(int y, int m, int d);
 %If (Qt_5_0_0 -)
     QDate addDays(qint64 days) const;
@@ -203,8 +209,10 @@
     bool operator>(const QDate &other) const;
     bool operator>=(const QDate &other) const;
     static QDate currentDate();
+%If (PyQt_DateString)
     static QDate fromString(const QString &string, Qt::DateFormat format = Qt::TextDate);
     static QDate fromString(const QString &s, const QString &format);
+%End
     static bool isValid(int y, int m, int d);
     static bool isLeapYear(int year);
 %If (- Qt_5_0_0)
@@ -228,6 +236,7 @@
 %If (Qt_4_2_0 -)
     bool setDate(int year, int month, int date);
 %End
+%If (PyQt_TextDate)
 %If (Qt_4_5_0 -)
     void getDate(int *year, int *month, int *day);
 %End
@@ -240,6 +249,7 @@
     };
 
 %End
+%End
 };
 
 class QTime
@@ -341,6 +351,7 @@
         }
 %End
 
+%If (PyQt_DateString)
     long __hash__() const;
 %MethodCode
         if (sipIsAPIEnabled("QTime", 2, 0))
@@ -353,6 +364,7 @@
             sipRes = _Py_HashPointer(sipSelf);
         }
 %End
+%End
 
 %If (Py_DateTime)
     SIP_PYOBJECT toPyTime() const /DocType="datetime.time"/;
@@ -376,8 +388,10 @@
     int minute() const;
     int second() const;
     int msec() const;
+%If (PyQt_DateString)
     QString toString(Qt::DateFormat format = Qt::TextDate) const;
     QString toString(const QString &format) const;
+%End
     bool setHMS(int h, int m, int s, int msec = 0);
     QTime addSecs(int secs) const;
     int secsTo(const QTime &) const;
@@ -390,8 +404,10 @@
     bool operator>(const QTime &other) const;
     bool operator>=(const QTime &other) const;
     static QTime currentTime();
+%If (PyQt_DateString)
     static QTime fromString(const QString &string, Qt::DateFormat format = Qt::TextDate);
     static QTime fromString(const QString &s, const QString &format);
+%End
     static bool isValid(int h, int m, int s, int msec = 0);
     void start();
     int restart();
@@ -539,6 +555,7 @@
         }
 %End
 
+%If (PyQt_DateString)
     long __hash__() const;
 %MethodCode
         if (sipIsAPIEnabled("QDateTime", 2, 0))
@@ -551,6 +568,7 @@
             sipRes = _Py_HashPointer(sipSelf);
         }
 %End
+%End
 
 %If (Py_DateTime)
     SIP_PYOBJECT toPyDateTime() const /DocType="datetime.datetime"/;
@@ -582,8 +600,10 @@
     void setTime(const QTime &time);
     void setTimeSpec(Qt::TimeSpec spec);
     void setTime_t(uint secsSince1Jan1970UTC);
+%If (PyQt_DateString)
     QString toString(Qt::DateFormat format = Qt::TextDate) const;
     QString toString(const QString &format) const;
+%End
 %If (Qt_5_0_0 -)
     QDateTime addDays(qint64 days) const;
 %End
@@ -611,8 +631,10 @@
     bool operator>(const QDateTime &other) const;
     bool operator>=(const QDateTime &other) const;
     static QDateTime currentDateTime();
+%If (PyQt_DateString)
     static QDateTime fromString(const QString &string, Qt::DateFormat format = Qt::TextDate);
     static QDateTime fromString(const QString &s, const QString &format);
+%End
 %If (Qt_4_2_0 -)
     static QDateTime fromTime_t(uint secsSince1Jan1970UTC);
 %End
@@ -636,9 +658,11 @@
 %End
 };
 
+%If (PyQt_DataStream)
 QDataStream &operator<<(QDataStream &, const QDate & /Constrained/);
 QDataStream &operator>>(QDataStream &, QDate & /Constrained/);
 QDataStream &operator<<(QDataStream &, const QTime & /Constrained/);
 QDataStream &operator>>(QDataStream &, QTime & /Constrained/);
 QDataStream &operator<<(QDataStream &, const QDateTime & /Constrained/);
 QDataStream &operator>>(QDataStream &, QDateTime & /Constrained/);
+%End
